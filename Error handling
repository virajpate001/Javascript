- Error handling in JavaScript is done using try, catch, finally, and optionally, the throw statement. 
- These constructs allow you to handle errors gracefully, prevent crashes, and provide meaningful error messages. 

1)Try-Catch Statement:
a) try block : The try block contains the code that might throw an exception.
b) catch block : The catch block is executed only if an exception occurs in the try block. The error parameter holds information about the exception.
c) finally block : The finally block contains code that always runs, whether an exception occurred or not. It is optional.

Example 1)
try {
   let a = 10;
   console.log(a);
  } catch (error) {
  // Code to handle the exception
  console.error(error.message);
} finally {
  // Code that always runs, whether an exception occurred or not
  console.log("This will always be executed");
}


2) Name, Message , stack
Example 1) 
try{
     blallbl;
  }catch(error){
   console.error(error.name);
   console.error(error.message);
   console.error(error.stack);
  }


3) Types of Errors 
 a) EvalError
 b) RangeError 
 c) ReferenceError 
 d) SyntaxError 
 e) TypeError
 f) URIError
 g) AggregateError

Example 1) 

try{
     blallbl;
  }catch(error){
    
    if(error instanceof ReferenceError){
      console.log("ReferenceError");
    }else if(error instanceof TypeError){
      console.log("TypeError");
    }
     else{
      console.log("Other Error");
     }
  }

4) Custom Errors:
You can throw custom errors using the throw statement. 

try {
  throw new Error("This is a custom error");
} catch (customError) {
  console.error(customError.message);
}



5) Async/Await Error Handling:
- When working with asynchronous code using async functions and await, you can use try, catch, and finally as well.

Example 1) 
 async function fetchData() {
  try {
    const response = await fetch("https://jsonplaceholder.typicode.com/comments");
    const data = await response.json();
    console.log(data);
  } catch (error) {
    console.error("Error fetching data:", error.message);
  } finally {
    console.log("Async operation complete");
  }
}

fetchData();
